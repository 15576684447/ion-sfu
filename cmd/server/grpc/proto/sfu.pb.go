// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmd/server/grpc/proto/sfu.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignalRequest struct {
	// Types that are valid to be assigned to Payload:
	//	*SignalRequest_Connect
	//	*SignalRequest_Trickle
	//	*SignalRequest_Subscribe
	Payload              isSignalRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SignalRequest) Reset()         { *m = SignalRequest{} }
func (m *SignalRequest) String() string { return proto.CompactTextString(m) }
func (*SignalRequest) ProtoMessage()    {}
func (*SignalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{0}
}

func (m *SignalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalRequest.Unmarshal(m, b)
}
func (m *SignalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalRequest.Marshal(b, m, deterministic)
}
func (m *SignalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalRequest.Merge(m, src)
}
func (m *SignalRequest) XXX_Size() int {
	return xxx_messageInfo_SignalRequest.Size(m)
}
func (m *SignalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignalRequest proto.InternalMessageInfo

type isSignalRequest_Payload interface {
	isSignalRequest_Payload()
}

type SignalRequest_Connect struct {
	Connect *SessionDescription `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type SignalRequest_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,2,opt,name=trickle,proto3,oneof"`
}

type SignalRequest_Subscribe struct {
	Subscribe *Subscribe `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof"`
}

func (*SignalRequest_Connect) isSignalRequest_Payload() {}

func (*SignalRequest_Trickle) isSignalRequest_Payload() {}

func (*SignalRequest_Subscribe) isSignalRequest_Payload() {}

func (m *SignalRequest) GetPayload() isSignalRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SignalRequest) GetConnect() *SessionDescription {
	if x, ok := m.GetPayload().(*SignalRequest_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *SignalRequest) GetTrickle() *Trickle {
	if x, ok := m.GetPayload().(*SignalRequest_Trickle); ok {
		return x.Trickle
	}
	return nil
}

func (m *SignalRequest) GetSubscribe() *Subscribe {
	if x, ok := m.GetPayload().(*SignalRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignalRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignalRequest_Connect)(nil),
		(*SignalRequest_Trickle)(nil),
		(*SignalRequest_Subscribe)(nil),
	}
}

type SignalReply struct {
	// Types that are valid to be assigned to Payload:
	//	*SignalReply_Connect
	//	*SignalReply_Trickle
	//	*SignalReply_Track
	Payload              isSignalReply_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SignalReply) Reset()         { *m = SignalReply{} }
func (m *SignalReply) String() string { return proto.CompactTextString(m) }
func (*SignalReply) ProtoMessage()    {}
func (*SignalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{1}
}

func (m *SignalReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalReply.Unmarshal(m, b)
}
func (m *SignalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalReply.Marshal(b, m, deterministic)
}
func (m *SignalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalReply.Merge(m, src)
}
func (m *SignalReply) XXX_Size() int {
	return xxx_messageInfo_SignalReply.Size(m)
}
func (m *SignalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalReply.DiscardUnknown(m)
}

var xxx_messageInfo_SignalReply proto.InternalMessageInfo

type isSignalReply_Payload interface {
	isSignalReply_Payload()
}

type SignalReply_Connect struct {
	Connect *ConnectReply `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type SignalReply_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,2,opt,name=trickle,proto3,oneof"`
}

type SignalReply_Track struct {
	Track *OnTrack `protobuf:"bytes,3,opt,name=track,proto3,oneof"`
}

func (*SignalReply_Connect) isSignalReply_Payload() {}

func (*SignalReply_Trickle) isSignalReply_Payload() {}

func (*SignalReply_Track) isSignalReply_Payload() {}

func (m *SignalReply) GetPayload() isSignalReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SignalReply) GetConnect() *ConnectReply {
	if x, ok := m.GetPayload().(*SignalReply_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *SignalReply) GetTrickle() *Trickle {
	if x, ok := m.GetPayload().(*SignalReply_Trickle); ok {
		return x.Trickle
	}
	return nil
}

func (m *SignalReply) GetTrack() *OnTrack {
	if x, ok := m.GetPayload().(*SignalReply_Track); ok {
		return x.Track
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignalReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignalReply_Connect)(nil),
		(*SignalReply_Trickle)(nil),
		(*SignalReply_Track)(nil),
	}
}

type ConnectReply struct {
	Pid                  string              `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Answer               *SessionDescription `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ConnectReply) Reset()         { *m = ConnectReply{} }
func (m *ConnectReply) String() string { return proto.CompactTextString(m) }
func (*ConnectReply) ProtoMessage()    {}
func (*ConnectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{2}
}

func (m *ConnectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectReply.Unmarshal(m, b)
}
func (m *ConnectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectReply.Marshal(b, m, deterministic)
}
func (m *ConnectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectReply.Merge(m, src)
}
func (m *ConnectReply) XXX_Size() int {
	return xxx_messageInfo_ConnectReply.Size(m)
}
func (m *ConnectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectReply.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectReply proto.InternalMessageInfo

func (m *ConnectReply) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *ConnectReply) GetAnswer() *SessionDescription {
	if m != nil {
		return m.Answer
	}
	return nil
}

type Subscribe struct {
	Ssrc                 []int32  `protobuf:"varint,1,rep,packed,name=ssrc,proto3" json:"ssrc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscribe) Reset()         { *m = Subscribe{} }
func (m *Subscribe) String() string { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()    {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{3}
}

func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscribe.Unmarshal(m, b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
}
func (m *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(m, src)
}
func (m *Subscribe) XXX_Size() int {
	return xxx_messageInfo_Subscribe.Size(m)
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetSsrc() []int32 {
	if m != nil {
		return m.Ssrc
	}
	return nil
}

type Trickle struct {
	Candidate            string   `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trickle) Reset()         { *m = Trickle{} }
func (m *Trickle) String() string { return proto.CompactTextString(m) }
func (*Trickle) ProtoMessage()    {}
func (*Trickle) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{4}
}

func (m *Trickle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trickle.Unmarshal(m, b)
}
func (m *Trickle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trickle.Marshal(b, m, deterministic)
}
func (m *Trickle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trickle.Merge(m, src)
}
func (m *Trickle) XXX_Size() int {
	return xxx_messageInfo_Trickle.Size(m)
}
func (m *Trickle) XXX_DiscardUnknown() {
	xxx_messageInfo_Trickle.DiscardUnknown(m)
}

var xxx_messageInfo_Trickle proto.InternalMessageInfo

func (m *Trickle) GetCandidate() string {
	if m != nil {
		return m.Candidate
	}
	return ""
}

type OnTrack struct {
	Ssrc                 int32    `protobuf:"varint,1,opt,name=ssrc,proto3" json:"ssrc,omitempty"`
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnTrack) Reset()         { *m = OnTrack{} }
func (m *OnTrack) String() string { return proto.CompactTextString(m) }
func (*OnTrack) ProtoMessage()    {}
func (*OnTrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{5}
}

func (m *OnTrack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnTrack.Unmarshal(m, b)
}
func (m *OnTrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnTrack.Marshal(b, m, deterministic)
}
func (m *OnTrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnTrack.Merge(m, src)
}
func (m *OnTrack) XXX_Size() int {
	return xxx_messageInfo_OnTrack.Size(m)
}
func (m *OnTrack) XXX_DiscardUnknown() {
	xxx_messageInfo_OnTrack.DiscardUnknown(m)
}

var xxx_messageInfo_OnTrack proto.InternalMessageInfo

func (m *OnTrack) GetSsrc() int32 {
	if m != nil {
		return m.Ssrc
	}
	return 0
}

func (m *OnTrack) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type SessionDescription struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Sdp                  []byte   `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionDescription) Reset()         { *m = SessionDescription{} }
func (m *SessionDescription) String() string { return proto.CompactTextString(m) }
func (*SessionDescription) ProtoMessage()    {}
func (*SessionDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca80ff2c9b7a4e60, []int{6}
}

func (m *SessionDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionDescription.Unmarshal(m, b)
}
func (m *SessionDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionDescription.Marshal(b, m, deterministic)
}
func (m *SessionDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionDescription.Merge(m, src)
}
func (m *SessionDescription) XXX_Size() int {
	return xxx_messageInfo_SessionDescription.Size(m)
}
func (m *SessionDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionDescription.DiscardUnknown(m)
}

var xxx_messageInfo_SessionDescription proto.InternalMessageInfo

func (m *SessionDescription) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SessionDescription) GetSdp() []byte {
	if m != nil {
		return m.Sdp
	}
	return nil
}

func init() {
	proto.RegisterType((*SignalRequest)(nil), "sfu.SignalRequest")
	proto.RegisterType((*SignalReply)(nil), "sfu.SignalReply")
	proto.RegisterType((*ConnectReply)(nil), "sfu.ConnectReply")
	proto.RegisterType((*Subscribe)(nil), "sfu.Subscribe")
	proto.RegisterType((*Trickle)(nil), "sfu.Trickle")
	proto.RegisterType((*OnTrack)(nil), "sfu.OnTrack")
	proto.RegisterType((*SessionDescription)(nil), "sfu.SessionDescription")
}

func init() { proto.RegisterFile("cmd/server/grpc/proto/sfu.proto", fileDescriptor_ca80ff2c9b7a4e60) }

var fileDescriptor_ca80ff2c9b7a4e60 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0x6b, 0x42, 0x1b, 0xe5, 0x4e, 0x41, 0x83, 0x85, 0x44, 0x85, 0x90, 0x66, 0x14, 0x21,
	0xd1, 0x05, 0xc4, 0x68, 0xca, 0x0a, 0x76, 0x03, 0x42, 0xdd, 0x21, 0xdc, 0x61, 0xc3, 0xce, 0x71,
	0xdc, 0x62, 0x4d, 0xc6, 0x36, 0xb6, 0x03, 0xca, 0x93, 0xf0, 0x0c, 0xbc, 0x25, 0xb2, 0x9d, 0xd0,
	0xf0, 0xb7, 0x61, 0x95, 0x9b, 0xe3, 0x73, 0xef, 0xf9, 0xfc, 0x03, 0x67, 0xfc, 0xa6, 0x21, 0x4e,
	0xd8, 0x2f, 0xc2, 0x92, 0x83, 0x35, 0x9c, 0x18, 0xab, 0xbd, 0x26, 0x6e, 0xdf, 0x55, 0xb1, 0xc2,
	0x99, 0xdb, 0x77, 0xe5, 0x77, 0x04, 0x77, 0x76, 0xf2, 0xa0, 0x58, 0x4b, 0xc5, 0xe7, 0x4e, 0x38,
	0x8f, 0x37, 0x90, 0x73, 0xad, 0x94, 0xe0, 0x7e, 0x85, 0xce, 0xd1, 0xfa, 0xe4, 0xe2, 0x41, 0x15,
	0x7a, 0x76, 0xc2, 0x39, 0xa9, 0xd5, 0x1b, 0xe1, 0xb8, 0x95, 0xc6, 0x4b, 0xad, 0xb6, 0x33, 0x3a,
	0x3a, 0xf1, 0x1a, 0x72, 0x6f, 0x25, 0xbf, 0x6e, 0xc5, 0xea, 0x56, 0x6c, 0x5a, 0xc6, 0xa6, 0xab,
	0xa4, 0x05, 0xe7, 0xb0, 0x8c, 0x2b, 0x28, 0x5c, 0x57, 0x87, 0x21, 0xb5, 0x58, 0x65, 0xd1, 0x7b,
	0x37, 0x05, 0x8c, 0xea, 0x76, 0x46, 0x8f, 0x96, 0xcb, 0x02, 0x72, 0xc3, 0xfa, 0x56, 0xb3, 0xa6,
	0xfc, 0x86, 0xe0, 0x64, 0x64, 0x35, 0x6d, 0x8f, 0x9f, 0xfd, 0x4e, 0x7a, 0x2f, 0x0e, 0x7a, 0x9d,
	0xb4, 0xe8, 0xf9, 0x3f, 0xc6, 0xc7, 0x30, 0xf7, 0x96, 0xf1, 0xeb, 0x81, 0x2f, 0xf9, 0xde, 0xa9,
	0xab, 0xa0, 0x6d, 0x67, 0x34, 0x2d, 0x4e, 0xc9, 0xde, 0xc3, 0x72, 0x9a, 0x8a, 0x4f, 0x21, 0x33,
	0xb2, 0x89, 0x54, 0x05, 0x0d, 0x25, 0x26, 0xb0, 0x60, 0xca, 0x7d, 0x15, 0x76, 0xc8, 0xfe, 0xd7,
	0xa1, 0xd2, 0xc1, 0x56, 0x9e, 0x41, 0xf1, 0xf3, 0x44, 0x30, 0x86, 0xdb, 0xce, 0x59, 0xbe, 0x42,
	0xe7, 0xd9, 0x7a, 0x4e, 0x63, 0x5d, 0x3e, 0x81, 0x7c, 0x40, 0xc7, 0x8f, 0xa0, 0xe0, 0x4c, 0x35,
	0xb2, 0x61, 0x5e, 0x0c, 0xa1, 0x47, 0xa1, 0xdc, 0x40, 0x3e, 0xb0, 0x4f, 0xe6, 0xa0, 0x71, 0x0e,
	0xbe, 0x0f, 0xf3, 0x96, 0xd5, 0xa2, 0x8d, 0x60, 0x05, 0x4d, 0x3f, 0xe5, 0x4b, 0xc0, 0x7f, 0xc2,
	0x85, 0x7e, 0xdf, 0x9b, 0x31, 0x23, 0xd6, 0x61, 0xaf, 0xae, 0x31, 0xb1, 0x7b, 0x49, 0x43, 0x79,
	0xf1, 0x0a, 0xb2, 0xdd, 0xdb, 0x0f, 0xf8, 0x05, 0x2c, 0xd2, 0x6d, 0x61, 0x9c, 0x36, 0x3b, 0x7d,
	0x66, 0x0f, 0x4f, 0x7f, 0xd1, 0x4c, 0xdb, 0x97, 0xb3, 0x35, 0x7a, 0x8e, 0x2e, 0xab, 0x8f, 0x4f,
	0x0f, 0xd2, 0x7f, 0xea, 0xea, 0x8a, 0xeb, 0x1b, 0x62, 0xa4, 0x56, 0x44, 0x6a, 0xe5, 0xf6, 0x1d,
	0xf9, 0xeb, 0x7b, 0xae, 0x17, 0xf1, 0xb3, 0xf9, 0x11, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x96, 0x0b,
	0x38, 0xef, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SFUClient is the client API for SFU service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SFUClient interface {
	Signal(ctx context.Context, opts ...grpc.CallOption) (SFU_SignalClient, error)
}

type sFUClient struct {
	cc *grpc.ClientConn
}

func NewSFUClient(cc *grpc.ClientConn) SFUClient {
	return &sFUClient{cc}
}

func (c *sFUClient) Signal(ctx context.Context, opts ...grpc.CallOption) (SFU_SignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SFU_serviceDesc.Streams[0], "/sfu.SFU/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &sFUSignalClient{stream}
	return x, nil
}

type SFU_SignalClient interface {
	Send(*SignalRequest) error
	Recv() (*SignalReply, error)
	grpc.ClientStream
}

type sFUSignalClient struct {
	grpc.ClientStream
}

func (x *sFUSignalClient) Send(m *SignalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sFUSignalClient) Recv() (*SignalReply, error) {
	m := new(SignalReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SFUServer is the server API for SFU service.
type SFUServer interface {
	Signal(SFU_SignalServer) error
}

// UnimplementedSFUServer can be embedded to have forward compatible implementations.
type UnimplementedSFUServer struct {
}

func (*UnimplementedSFUServer) Signal(srv SFU_SignalServer) error {
	return status.Errorf(codes.Unimplemented, "method Signal not implemented")
}

func RegisterSFUServer(s *grpc.Server, srv SFUServer) {
	s.RegisterService(&_SFU_serviceDesc, srv)
}

func _SFU_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SFUServer).Signal(&sFUSignalServer{stream})
}

type SFU_SignalServer interface {
	Send(*SignalReply) error
	Recv() (*SignalRequest, error)
	grpc.ServerStream
}

type sFUSignalServer struct {
	grpc.ServerStream
}

func (x *sFUSignalServer) Send(m *SignalReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sFUSignalServer) Recv() (*SignalRequest, error) {
	m := new(SignalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SFU_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sfu.SFU",
	HandlerType: (*SFUServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signal",
			Handler:       _SFU_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/server/grpc/proto/sfu.proto",
}
